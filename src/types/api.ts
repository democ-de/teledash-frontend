/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: operations["root__get"];
  };
  "/auth/jwt/login": {
    post: operations["auth_jwt_login_auth_jwt_login_post"];
  };
  "/auth/jwt/logout": {
    post: operations["auth_jwt_logout_auth_jwt_logout_post"];
  };
  "/auth/jwt/refresh": {
    post: operations["refresh_jwt_auth_jwt_refresh_post"];
  };
  "/auth/register": {
    post: operations["register_register_auth_register_post"];
  };
  "/auth/forgot-password": {
    post: operations["reset_forgot_password_auth_forgot_password_post"];
  };
  "/auth/reset-password": {
    post: operations["reset_reset_password_auth_reset_password_post"];
  };
  "/auth/request-verify-token": {
    post: operations["verify_request_token_auth_request_verify_token_post"];
  };
  "/auth/verify": {
    post: operations["verify_verify_auth_verify_post"];
  };
  "/accounts/me": {
    get: operations["users_current_user_accounts_me_get"];
    patch: operations["users_current_user_accounts_me_patch"];
  };
  "/accounts/{id}": {
    get: operations["users_user_accounts__id__get"];
    delete: operations["users_user_accounts__id__delete"];
    patch: operations["users_user_accounts__id__patch"];
  };
  "/storage/{bucket_name}/{object_name}": {
    get: operations["get_file_storage__bucket_name___object_name__get"];
  };
  "/messages": {
    get: operations["list_messages_messages_get"];
  };
  "/messages/{id}": {
    get: operations["show_message_messages__id__get"];
    put: operations["update_message_messages__id__put"];
  };
  "/clients": {
    get: operations["list_clients_clients_get"];
    post: operations["create_client_clients_post"];
  };
  "/clients/{id}": {
    get: operations["get_client_clients__id__get"];
    put: operations["update_client_clients__id__put"];
    delete: operations["delete_client_clients__id__delete"];
  };
  "/clients/{id}/session": {
    put: operations["create_session_clients__id__session_put"];
  };
  "/chats/{id}": {
    get: operations["get_chat_chats__id__get"];
    put: operations["update_chat_chats__id__put"];
  };
  "/chats": {
    get: operations["list_chats_chats_get"];
  };
  "/users/{id}": {
    get: operations["get_user_users__id__get"];
  };
  "/users": {
    get: operations["list_users_users_get"];
  };
}

export interface components {
  schemas: {
    /**
     * Account
     * @description Base User model.
     */
    Account: {
      /**
       * Id
       * Format: uuid4
       */
      id?: string;
      /**
       * Email
       * Format: email
       */
      email: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Is Superuser */
      is_superuser?: boolean;
      /** Is Verified */
      is_verified?: boolean;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
      /** Clients */
      clients?: string[];
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
    };
    /** AccountCreate */
    AccountCreate: {
      /**
       * Email
       * Format: email
       */
      email: string;
      /** Password */
      password: string;
      /**
       * Is Active
       * @default true
       */
      is_active?: boolean;
      /** Is Superuser */
      is_superuser?: boolean;
      /** Is Verified */
      is_verified?: boolean;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name: string;
    };
    /** AccountUpdate */
    AccountUpdate: {
      /** Password */
      password?: string;
      /**
       * Email
       * Format: email
       */
      email?: string;
      /** Is Active */
      is_active?: boolean;
      /** Is Superuser */
      is_superuser?: boolean;
      /** Is Verified */
      is_verified?: boolean;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
    };
    /** AggregatedMetrics */
    AggregatedMetrics: {
      /**
       * Start Date
       * Format: date-time
       */
      start_date?: string;
      /**
       * End Date
       * Format: date-time
       */
      end_date?: string;
      /** Time Delta */
      time_delta?: number;
      /** Sum */
      sum?: number;
      /** Diff */
      diff?: number;
      /** Data */
      data?: number[];
    };
    /** BearerResponse */
    BearerResponse: {
      /** Access Token */
      access_token: string;
      /** Token Type */
      token_type: string;
    };
    /** Body_auth_jwt_login_auth_jwt_login_post */
    Body_auth_jwt_login_auth_jwt_login_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /** Scope */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** Body_reset_forgot_password_auth_forgot_password_post */
    Body_reset_forgot_password_auth_forgot_password_post: {
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** Body_reset_reset_password_auth_reset_password_post */
    Body_reset_reset_password_auth_reset_password_post: {
      /** Token */
      token: string;
      /** Password */
      password: string;
    };
    /** Body_verify_request_token_auth_request_verify_token_post */
    Body_verify_request_token_auth_request_verify_token_post: {
      /**
       * Email
       * Format: email
       */
      email: string;
    };
    /** Body_verify_verify_auth_verify_post */
    Body_verify_verify_auth_verify_post: {
      /** Token */
      token: string;
    };
    /**
     * ChatIn
     * @description The chat model with only those fields that can be modified by a client consuming
     * the API (used in REST-API for POST/PUT/PATCH endpoints).
     */
    ChatIn: {
      /** Language */
      language?: string;
      /** Language Other */
      language_other?: string[];
    };
    /** ChatMetrics */
    ChatMetrics: {
      activity_last_day?: components["schemas"]["AggregatedMetrics"];
      activity_total?: components["schemas"]["AggregatedMetrics"];
      growth_last_day?: components["schemas"]["AggregatedMetrics"];
      growth_total?: components["schemas"]["AggregatedMetrics"];
    };
    /**
     * ChatOut
     * @description The complete chat model as it is returned by the REST-API.
     * All fields are optional.
     */
    ChatOut: {
      /** Language */
      language?: string;
      /** Language Other */
      language_other?: string[];
      /** Id */
      _id?: number;
      type?: components["schemas"]["ChatType"];
      /** Title */
      title?: string;
      /** Username */
      username?: string;
      /** Is Verified */
      is_verified?: boolean;
      /** Is Restricted */
      is_restricted?: boolean;
      /** Is Scam */
      is_scam?: boolean;
      /** Is Fake */
      is_fake?: boolean;
      /** Photo */
      photo?: { [key: string]: unknown };
      /** Description */
      description?: string;
      /** Invite Link */
      invite_link?: string;
      pinned_message?: components["schemas"]["MessageRef"];
      /** Members */
      members?: components["schemas"]["UserRef"][];
      /** Members Count */
      members_count?: number;
      metrics?: components["schemas"]["ChatMetrics"];
      linked_chat?: components["schemas"]["ChatRef"];
      /** Restrictions */
      restrictions?: { [key: string]: unknown }[];
      /** Permissions */
      permissions?: { [key: string]: unknown };
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /**
       * Scraped At
       * Format: date-time
       */
      scraped_at?: string;
      /** Scraped By */
      scraped_by?: string;
    };
    /** ChatRef */
    ChatRef: {
      /** Id */
      _id: number;
      /** Title */
      title?: string;
      /** Username */
      username?: string;
    };
    /**
     * ChatSortBy
     * @description An enumeration.
     * @enum {string}
     */
    ChatSortBy:
      | "username"
      | "title"
      | "members_count"
      | "updated_at"
      | "scraped_at";
    /**
     * ChatType
     * @description An enumeration.
     * @enum {string}
     */
    ChatType: "group" | "supergroup" | "channel";
    /**
     * ClientCreate
     * @description The complete client model with Telegram auth infos as it is stored in the
     * database (used in REST-API and by the scraper).
     */
    ClientCreate: {
      /** Title */
      title?: string;
      /** Phone Number */
      phone_number: string;
      /** Api Id */
      api_id: number;
      /** Api Hash */
      api_hash: string;
      /** Id */
      _id?: string;
      /** Session Hash */
      session_hash?: string;
      /** User Id */
      user_id?: number;
      /** Chats */
      chats?: components["schemas"]["ChatRef"][];
      /** Is Active */
      is_active?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Auth */
      auth?: unknown;
    };
    /**
     * ClientCreateSession
     * @example [object Object]
     */
    ClientCreateSession: {
      /** Phone Code Hash */
      phone_code_hash: string;
      /** Phone Code */
      phone_code: string;
    };
    /**
     * ClientIn
     * @description The client model with Telegram auth infos and only those fields that can be
     * modified by a client consuming the API (used in REST-API for
     * POST/PUT/PATCH endpoints).
     */
    ClientIn: {
      /** Title */
      title?: string;
      /** Phone Number */
      phone_number: string;
      /** Api Id */
      api_id: number;
      /** Api Hash */
      api_hash: string;
    };
    /**
     * ClientOut
     * @description The complete client model as it is returned by the REST-API.
     * All fields are optional.
     */
    ClientOut: {
      /** Title */
      title?: string;
      /** Phone Number */
      phone_number: string;
      /** Api Id */
      api_id: number;
      /** Api Hash */
      api_hash: string;
      /** Id */
      id?: string;
      /** Session Hash */
      session_hash?: string;
      /** User Id */
      user_id?: number;
      /** Chats */
      chats?: components["schemas"]["ChatRef"][];
      /** Is Active */
      is_active?: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
    };
    /**
     * ClientSortBy
     * @description An enumeration.
     * @enum {string}
     */
    ClientSortBy: "created_at" | "updated_at";
    /** ErrorModel */
    ErrorModel: {
      /** Detail */
      detail: Partial<string> & Partial<{ [key: string]: string }>;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** MessageAttachment */
    MessageAttachment: {
      type: components["schemas"]["MessageAttachmentType"];
      /** Group Id */
      group_id?: string;
      /** Raw */
      raw?: { [key: string]: unknown };
      /** Ocr */
      ocr?: string;
      /** Transcription */
      transcription?: string;
      /** Storage Refs */
      storage_refs?: components["schemas"]["MessageAttachmentStorageRef"][];
    };
    /** MessageAttachmentStorageRef */
    MessageAttachmentStorageRef: {
      /** Bucket */
      bucket: string;
      /** Object */
      object: string;
    };
    /**
     * MessageAttachmentType
     * @description An enumeration.
     * @enum {string}
     */
    MessageAttachmentType:
      | "audio"
      | "document"
      | "photo"
      | "sticker"
      | "video"
      | "animation"
      | "voice"
      | "video_note"
      | "contact"
      | "location"
      | "venue"
      | "poll"
      | "web_page"
      | "dice"
      | "game";
    /** MessageForward */
    MessageForward: {
      from_user?: components["schemas"]["UserRef"];
      /** Sender Name */
      sender_name?: string;
      from_chat?: components["schemas"]["ChatRef"];
      /** From Message Id */
      from_message_id?: number;
      /** Signature */
      signature?: string;
      /**
       * Date
       * Format: date-time
       */
      date?: string;
    };
    /**
     * MessageIn
     * @description The message model with only those fields that can be modified by a client consuming
     * the API (used in REST-API for POST/PUT/PATCH endpoints).
     *
     * Adapted from Pyrograms message model:
     * https://docs.pyrogram.org/api/types/Message#pyrogram.types.Message
     */
    MessageIn: {
      /** Language */
      language?: string;
    };
    /**
     * MessageOut
     * @description The complete message model as it is returned by the REST-API.
     * All fields are optional.
     */
    MessageOut: {
      /** Language */
      language?: string;
      /** Id */
      _id?: string;
      /** Message Id */
      message_id?: number;
      from_user?: components["schemas"]["UserRef"];
      chat?: components["schemas"]["ChatRef"];
      sender_chat?: components["schemas"]["ChatRef"];
      /**
       * Date
       * Format: date-time
       */
      date?: string;
      forward?: components["schemas"]["MessageForward"];
      reply_to_message?: components["schemas"]["MessageRef"];
      /** Mentioned */
      mentioned?: boolean;
      /** Is Empty */
      is_empty?: boolean;
      attachment?: components["schemas"]["MessageAttachment"];
      /**
       * Edit Date
       * Format: date-time
       */
      edit_date?: string;
      /** Author Signature */
      author_signature?: string;
      /** Text */
      text?: string;
      /** Entities */
      entities?: { [key: string]: unknown }[];
      /** Caption */
      caption?: string;
      /** Caption Entities */
      caption_entities?: { [key: string]: unknown }[];
      /** Views */
      views?: number;
      /** Is Outgoing */
      is_outgoing?: boolean;
      service_info?: components["schemas"]["MessageServiceInfo"];
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Scraped By */
      scraped_by?: string;
    };
    /** MessageRef */
    MessageRef: {
      /** Id */
      _id: string;
      /** Text */
      text?: string;
      /** Caption */
      caption?: string;
      /** Has Attachment */
      has_attachment?: boolean;
      user?: components["schemas"]["UserRef"];
    };
    /** MessageServiceInfo */
    MessageServiceInfo: {
      /** New Chat Members */
      new_chat_members?: components["schemas"]["UserRef"][];
      left_chat_member?: components["schemas"]["UserRef"];
      /** New Chat Title */
      new_chat_title?: string;
      /** New Chat Photo */
      new_chat_photo?: { [key: string]: unknown };
      /** Delete Chat Photo */
      delete_chat_photo?: boolean;
      /** Group Chat Created */
      group_chat_created?: boolean;
      /** Supergroup Chat Created */
      supergroup_chat_created?: boolean;
      /** Channel Chat Created */
      channel_chat_created?: boolean;
      /** Migrate To Chat Id */
      migrate_to_chat_id?: number;
      /** Migrate From Chat Id */
      migrate_from_chat_id?: number;
      /** Pinned Message Id */
      pinned_message_id?: number;
    };
    /**
     * MessageSortBy
     * @description An enumeration.
     * @enum {string}
     */
    MessageSortBy: "message_id" | "date" | "views";
    /**
     * OrderEnum
     * @description An enumeration.
     * @enum {string}
     */
    OrderEnum: "asc" | "desc";
    /** PaginatedChats */
    PaginatedChats: {
      /** Data */
      data: components["schemas"]["ChatOut"][];
      pagination: components["schemas"]["PaginatedResponseInfo"];
    };
    /** PaginatedClients */
    PaginatedClients: {
      /** Data */
      data: components["schemas"]["ClientOut"][];
      pagination: components["schemas"]["PaginatedResponseInfo"];
    };
    /** PaginatedMessages */
    PaginatedMessages: {
      /** Data */
      data: components["schemas"]["MessageOut"][];
      pagination: components["schemas"]["PaginatedResponseInfo"];
    };
    /** PaginatedResponseInfo */
    PaginatedResponseInfo: {
      /** Offset */
      offset: number;
      /** Limit */
      limit: number;
      /** Max Limit */
      max_limit: number;
    };
    /** PaginatedUsers */
    PaginatedUsers: {
      /** Data */
      data: components["schemas"]["UserOut"][];
      pagination: components["schemas"]["PaginatedResponseInfo"];
    };
    /** UserMetrics */
    UserMetrics: {
      activity_last_day?: components["schemas"]["AggregatedMetrics"];
      activity_total?: components["schemas"]["AggregatedMetrics"];
    };
    /**
     * UserOut
     * @description The complete user model as it is returned by the REST-API.
     * All fields are optional.
     */
    UserOut: {
      /** Id */
      _id?: number;
      /** Username */
      username?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
      /** Is Self */
      is_self?: boolean;
      /** Is Contact */
      is_contact?: boolean;
      /** Is Mutual Contact */
      is_mutual_contact?: boolean;
      /** Is Deleted */
      is_deleted?: boolean;
      /** Is Bot */
      is_bot?: boolean;
      /** Is Verified */
      is_verified?: boolean;
      /** Is Restricted */
      is_restricted?: boolean;
      /** Is Scam */
      is_scam?: boolean;
      /** Is Fake */
      is_fake?: boolean;
      /** Is Support */
      is_support?: boolean;
      metrics?: components["schemas"]["UserMetrics"];
      /** Status */
      status?: string;
      /**
       * Last Online Date
       * Format: date-time
       */
      last_online_date?: string;
      /**
       * Next Offline Date
       * Format: date-time
       */
      next_offline_date?: string;
      /** Language Code */
      language_code?: string;
      /** Dc Id */
      dc_id?: number;
      /** Phone Number */
      phone_number?: string;
      /** Photo */
      photo?: { [key: string]: unknown };
      /** Restrictions */
      restrictions?: { [key: string]: unknown }[];
      /**
       * Updated At
       * Format: date-time
       */
      updated_at?: string;
      /** Scraped By */
      scraped_by?: string;
    };
    /** UserRef */
    UserRef: {
      /** Id */
      _id: number;
      /** Username */
      username?: string;
      /** First Name */
      first_name?: string;
      /** Last Name */
      last_name?: string;
    };
    /**
     * UserSortBy
     * @description An enumeration.
     * @enum {string}
     */
    UserSortBy: "updated_at";
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
}

export interface operations {
  root__get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  auth_jwt_login_auth_jwt_login_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BearerResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_auth_jwt_login_auth_jwt_login_post"];
      };
    };
  };
  auth_jwt_logout_auth_jwt_logout_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Missing token or inactive user. */
      401: unknown;
    };
  };
  refresh_jwt_auth_jwt_refresh_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  register_register_auth_register_post: {
    responses: {
      /** Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountCreate"];
      };
    };
  };
  reset_forgot_password_auth_forgot_password_post: {
    responses: {
      /** Successful Response */
      202: {
        content: {
          "application/json": unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_reset_forgot_password_auth_forgot_password_post"];
      };
    };
  };
  reset_reset_password_auth_reset_password_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_reset_reset_password_auth_reset_password_post"];
      };
    };
  };
  verify_request_token_auth_request_verify_token_post: {
    responses: {
      /** Successful Response */
      202: {
        content: {
          "application/json": unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_verify_request_token_auth_request_verify_token_post"];
      };
    };
  };
  verify_verify_auth_verify_post: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_verify_verify_auth_verify_post"];
      };
    };
  };
  users_current_user_accounts_me_get: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** Missing token or inactive user. */
      401: unknown;
    };
  };
  users_current_user_accounts_me_patch: {
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** Missing token or inactive user. */
      401: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountUpdate"];
      };
    };
  };
  users_user_accounts__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** Missing token or inactive user. */
      401: unknown;
      /** Not a superuser. */
      403: unknown;
      /** The user does not exist. */
      404: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_user_accounts__id__delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful Response */
      204: never;
      /** Missing token or inactive user. */
      401: unknown;
      /** Not a superuser. */
      403: unknown;
      /** The user does not exist. */
      404: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_user_accounts__id__patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorModel"];
        };
      };
      /** Missing token or inactive user. */
      401: unknown;
      /** Not a superuser. */
      403: unknown;
      /** The user does not exist. */
      404: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountUpdate"];
      };
    };
  };
  get_file_storage__bucket_name___object_name__get: {
    parameters: {
      path: {
        bucket_name: string;
        object_name: string;
      };
      query: {
        attachment?: boolean;
      };
    };
    responses: {
      /** Requested file from storage. Can be of any media type. */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** Any other error why the file could not be fetched. */
      400: unknown;
      /** The bucket or file was not found. */
      404: unknown;
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  list_messages_messages_get: {
    parameters: {
      query: {
        "from_user_ids[]"?: number[];
        "chat_ids[]"?: number[];
        date_from?: string;
        date_to?: string;
        is_empty?: boolean;
        attachment_type?: components["schemas"]["MessageAttachmentType"];
        sort_by?: components["schemas"]["MessageSortBy"];
        order?: components["schemas"]["OrderEnum"];
        search?: string;
        projection?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** List all messages */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedMessages"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  show_message_messages__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Get a single message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageOut"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_message_messages__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Update a message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageOut"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageIn"];
      };
    };
  };
  list_clients_clients_get: {
    parameters: {
      query: {
        is_active?: boolean;
        phone_number?: string;
        user_id?: number;
        chat_ids?: number[];
        sort_by?: components["schemas"]["ClientSortBy"];
        order?: components["schemas"]["OrderEnum"];
        search?: string;
        projection?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** List all clients */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedClients"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_client_clients_post: {
    responses: {
      /** Create a new client */
      201: {
        content: {
          "application/json": components["schemas"]["ClientCreate"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientIn"];
      };
    };
  };
  get_client_clients__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Get a single client */
      200: {
        content: {
          "application/json": components["schemas"]["ClientOut"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_client_clients__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Update a client */
      200: {
        content: {
          "application/json": components["schemas"]["ClientOut"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientIn"];
      };
    };
  };
  delete_client_clients__id__delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Delete a client */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_session_clients__id__session_put: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Create a new client session */
      200: {
        content: {
          "application/json": components["schemas"]["ClientOut"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientCreateSession"];
      };
    };
  };
  get_chat_chats__id__get: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Get a single chat */
      200: {
        content: {
          "application/json": components["schemas"]["ChatOut"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_chat_chats__id__put: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Update a chat */
      200: {
        content: {
          "application/json": components["schemas"]["ChatOut"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatIn"];
      };
    };
  };
  list_chats_chats_get: {
    parameters: {
      query: {
        type?: components["schemas"]["ChatType"];
        is_verified?: boolean;
        is_restricted?: boolean;
        is_scam?: boolean;
        is_fake?: boolean;
        sort_by?: components["schemas"]["ChatSortBy"];
        order?: components["schemas"]["OrderEnum"];
        search?: string;
        projection?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** List all chats */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedChats"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_users__id__get: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Get a single user */
      200: {
        content: {
          "application/json": components["schemas"]["UserOut"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  list_users_users_get: {
    parameters: {
      query: {
        is_deleted?: boolean;
        is_bot?: boolean;
        is_verified?: boolean;
        is_restricted?: boolean;
        is_scam?: boolean;
        is_fake?: boolean;
        is_support?: boolean;
        phone_number?: string;
        sort_by?: components["schemas"]["UserSortBy"];
        order?: components["schemas"]["OrderEnum"];
        search?: string;
        projection?: string;
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** List all users */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedUsers"];
        };
      };
      /** Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}

export interface external {}
